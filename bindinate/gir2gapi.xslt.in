<?xml version="1.0" encoding="UTF-8"?>

<!--
//
// gir2gapi.xslt
//
// This stylesheet converts gir to gapi format
//
//
//
//
// Author:
//   Andreia Gaita (shana@spoiledcat.net)
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
-->

<xsl:stylesheet version="1.0" 
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:exsl="http://exslt.org/common"
xmlns:gir="http://www.gtk.org/introspection/core/1.0"
xmlns:c="http://www.gtk.org/introspection/c/1.0"
xmlns:glib="http://www.gtk.org/introspection/glib/1.0"
exclude-result-prefixes="xsl exsl gir c glib"

>
	<xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes"/>
	<xsl:strip-space elements="*" />

	<!--- maps svg names into xaml names -->
	<xsl:variable name="mappings">
		<mappings>
			<mapping from="default" to="_default"/>
			<mapping from="object" to="_object"/>
			<mapping from="GObjectObject" to="GObject"/>
			<mapping from="ret" to="_ret"/>
			<mapping from="result" to="_result"/>
		</mappings>
	</xsl:variable>

	<xsl:variable name="consttypes">
		<types>
			<type name="char*" />
			<type name="gchar*" />
			<type name="gfilename*" />

			<ctor>
				<type name="GType" />
				<type name="gpointer" />
			</ctor>
		</types>
	</xsl:variable>

	<xsl:variable name="typemappings">
		<mappings>
			<mapping from="gchararray" to="gchar*"/>
			<mapping from="any*" to="gpointer*"/>
			<mapping from="utf8" to="gchar*" />
			<mapping from="none" to="void" />
			<mapping from="any*" to="gpointer*"/>
			<mapping from="GPtrArray*" to="GPtrArray"/>
		</mappings>
	</xsl:variable>
	<!-- START HERE -->
	
	<xsl:template match="/">
		<xsl:apply-templates select="gir:repository" />
	</xsl:template>

	<xsl:template match="gir:repository">
		<xsl:variable name="external">
			<xsl:apply-templates select="gir:include" />
		</xsl:variable>

<!--
		<bla>
			<xsl:call-template name="map-gtype">
				<xsl:with-param name="type">Soup.Message</xsl:with-param>
				<xsl:with-param name="external" select="$external"/>
			</xsl:call-template>
		</bla>

		<bleh>
			<xsl:call-template name="output-type">
				<xsl:with-param name="nodename">return-type</xsl:with-param>
				<xsl:with-param name="typename">Soup.Message</xsl:with-param>
				<xsl:with-param name="type"/>
				<xsl:with-param name="transfer-ownership">none</xsl:with-param>
				<xsl:with-param name="doname">1</xsl:with-param>
				<xsl:with-param name="external" select="$external" />
			</xsl:call-template>
		</bleh>
-->
		<api>
			<xsl:apply-templates select="gir:namespace">
				<xsl:with-param name="external" select="$external" />
			</xsl:apply-templates>
		</api>

	</xsl:template>	

	<xsl:template match="gir:include">
		<include name="{@name}">
			<xsl:copy-of select="document(concat('@GIRDIR@', @name, '-', @version, '.gir'), .)" />
		</include>			
	</xsl:template>

	<xsl:template match="gir:namespace">
		<xsl:param name="external" />

		<xsl:variable name="split1"><xsl:value-of select="substring-after(@shared-library, 'lib')" /></xsl:variable>
		<xsl:variable name="library"><xsl:value-of select="substring-before($split1, '.so')" /></xsl:variable>
		<namespace name="{@name}" library="{$library}">
			<xsl:apply-templates select="gir:alias">
				<xsl:with-param name="external" select="$external" />
			</xsl:apply-templates>
			<xsl:apply-templates select="gir:enumeration">
				<xsl:with-param name="external" select="$external" />
			</xsl:apply-templates>
			<xsl:apply-templates select="gir:bitfield">
				<xsl:with-param name="external" select="$external" />
			</xsl:apply-templates>
			<xsl:apply-templates select="gir:class">
				<xsl:with-param name="external" select="$external" />
			</xsl:apply-templates>
			<xsl:apply-templates select="gir:interfae">
				<xsl:with-param name="external" select="$external" />
			</xsl:apply-templates>
			<xsl:apply-templates select="gir:record">
				<xsl:with-param name="external" select="$external" />
			</xsl:apply-templates>
			<xsl:apply-templates select="gir:callback">
				<xsl:with-param name="external" select="$external" />
			</xsl:apply-templates>
			<xsl:apply-templates select="*/gir:field/gir:callback">
				<xsl:with-param name="external" select="$external" />
			</xsl:apply-templates>

			<object name="Global" cname="{@name}Global" opaque="true">
				<xsl:for-each select="gir:function">
					<xsl:call-template name="output-method">
						<xsl:with-param name="shared">true</xsl:with-param>
						<xsl:with-param name="external" select="$external" />
					</xsl:call-template>
				</xsl:for-each>
				<xsl:for-each select="gir:method">
					<xsl:call-template name="output-method">
						<xsl:with-param name="shared">true</xsl:with-param>
						<xsl:with-param name="external" select="$external" />
					</xsl:call-template>
				</xsl:for-each>
			</object>
		</namespace>
	</xsl:template>	


	<xsl:template match="gir:class[not(@private) and not(@disguised)]">
		<xsl:param name="external" />

		<xsl:variable name="ptype">
			<type>
				<xsl:call-template name="map-gtype">
					<xsl:with-param name="type" select="@parent"/>
					<xsl:with-param name="external" select="$external"/>
				</xsl:call-template>
			</type>
		</xsl:variable>

		<xsl:variable name="parent">
			<xsl:value-of select="exsl:node-set($ptype)/type/@gtype" />
		</xsl:variable>

		<xsl:variable name="type">
			<xsl:call-template name="map-type">
				<xsl:with-param name="type" select="@c:type"/>
				<xsl:with-param name="name" select="@name"/>
				<xsl:with-param name="external" select="$external" />
			</xsl:call-template>
		</xsl:variable>

		<xsl:variable name="name">
			<xsl:call-template name="sanitize">
				<xsl:with-param name="name" select="@name" />
			</xsl:call-template>
		</xsl:variable>

		<xsl:variable name="opaque">
			<xsl:if test="contains(gir:doc/text(), 'opaque')">true</xsl:if>
		</xsl:variable>

		<object name="{$name}" cname="{exsl:node-set($type)/type/@gtype}" parent="{$parent}" abstract="{@abstract}" opaque="{$opaque}">
		      <method name="GetType" cname="{@glib:get-type}" shared="true">
		        <return-type type="GType" />
		      </method>

			<xsl:apply-templates>
				<xsl:with-param name="external" select="$external" />
			</xsl:apply-templates>
		</object>
	</xsl:template>	


	<xsl:template match="gir:record[not(@private) and not(@disguised)]">
		<xsl:param name="external" />

		<xsl:if test="not(@glib:is-gtype-struct-for)">
			<xsl:variable name="type">
				<xsl:call-template name="map-type">
					<xsl:with-param name="type" select="@c:type"/>
					<xsl:with-param name="name" select="@name"/>
					<xsl:with-param name="external" select="$external" />
				</xsl:call-template>
			</xsl:variable>

			<xsl:variable name="name">
				<xsl:call-template name="sanitize">
					<xsl:with-param name="name" select="@name" />
				</xsl:call-template>
			</xsl:variable>

			<xsl:variable name="opaque">
				<xsl:if test="contains(gir:doc/text(), 'opaque')">true</xsl:if>
			</xsl:variable>

			<struct name="{$name}" cname="{exsl:node-set($type)/type/@gtype}">
				<xsl:apply-templates>
					<xsl:with-param name="external" select="$external" />
				</xsl:apply-templates>
			</struct>
		</xsl:if>
	</xsl:template>	

	<xsl:template match="gir:interface[not(@private) and not(@disguised)]">
		<xsl:param name="external" />

		<xsl:variable name="type">
			<xsl:call-template name="map-type">
				<xsl:with-param name="type" select="@c:type"/>
				<xsl:with-param name="name" select="@name"/>
				<xsl:with-param name="external" select="$external" />
			</xsl:call-template>
		</xsl:variable>

		<xsl:variable name="name">
			<xsl:call-template name="sanitize">
				<xsl:with-param name="name" select="@name" />
			</xsl:call-template>
		</xsl:variable>

		<interface name="{$name}" cname="{exsl:node-set($type)/type/@gtype}">
			<method name="GetType" cname="{@glib:get-type}" shared="true">
				<return-type type="GType" />
			</method>
			<!-- xsl:apply-templates>
				<xsl:with-param name="external" select="$external" />
			</xsl:apply-templates -->
		</interface>
	</xsl:template>	

	<xsl:template match="gir:namespace/gir:method" />

	<xsl:template match="gir:method[not(@private) and not(@disguised)]">
		<xsl:param name="external" />

		<xsl:call-template name="output-method">
			<xsl:with-param name="external" select="$external" />
		</xsl:call-template>
	</xsl:template>	

	<xsl:template match="gir:virtual-method[not(@private) and not(@disguised)]">
		<xsl:param name="external" />

		<xsl:call-template name="output-method">
			<xsl:with-param name="nodename">virtual_method</xsl:with-param>
			<xsl:with-param name="cname" select="@name"/>
			<xsl:with-param name="external" select="$external" />
		</xsl:call-template>
	</xsl:template>	

	<xsl:template match="gir:namespace/gir:function" />

	<xsl:template match="gir:function[not(@private) and not(@disguised)]">
		<xsl:param name="external" />

		<xsl:call-template name="output-method">
			<xsl:with-param name="shared">true</xsl:with-param>
			<xsl:with-param name="external" select="$external" />
		</xsl:call-template>
	</xsl:template>	

	<xsl:template match="gir:callback">
		<xsl:param name="external" />

		<xsl:variable name="name"><xsl:call-template name="capitalize"><xsl:with-param name="string" select="@name" /></xsl:call-template></xsl:variable>
		<xsl:variable name="type"><xsl:choose><xsl:when test="@c:type"><xsl:value-of select="@c:type" /></xsl:when><xsl:otherwise><xsl:value-of select="//gir:repository/gir:namespace/@name"/><xsl:value-of select="$name"/>Func</xsl:otherwise></xsl:choose></xsl:variable>

		<callback name="{$name}" cname="{$type}">

			<!-- xsl:if test="gir:return-value/gir:type/@name != 'none'" -->
			<xsl:for-each select="gir:return-value">
				<return-type>
					<xsl:call-template name="output-type">
						<xsl:with-param name="nodename">return-type</xsl:with-param>
						<xsl:with-param name="typename" select="gir:type/@name" />
						<xsl:with-param name="type" select="gir:return-value/gir:type/@c:type" />
						<xsl:with-param name="transfer-ownership" select="gir:return-value/@transfer-ownership" />
						<xsl:with-param name="doname">0</xsl:with-param>
						<xsl:with-param name="external" select="$external" />
					</xsl:call-template>
				</return-type>
			</xsl:for-each>
			<!-- /xsl:if -->

			<xsl:if test="gir:parameters">

				<!-- For some wtf reason, some callbacks inside fields in the gir file include
					the pointer to the #$$@#$ parent type, which is something that gets added
					automatically. Remove the first such parameter if it's stupid -->
				<xsl:variable name="parent"><xsl:call-template name="get-real-type-name">
						<xsl:with-param name="node" select="../.."/>
						<xsl:with-param name="external" select="$external" />
					</xsl:call-template></xsl:variable>
				<parameters>
				<!-- xsl:for-each select="gir:parameters/gir:parameter[position()&gt;1 or gir:type/@name!=$parent]" -->
				<xsl:for-each select="gir:parameters/gir:parameter">
					<parameter>
					<xsl:call-template name="output-type">
						<xsl:with-param name="name" select="@name" />
						<xsl:with-param name="typename" select="gir:type/@name" />
						<xsl:with-param name="type" select="gir:type/@c:type" />
						<xsl:with-param name="transfer-ownership" select="@transfer-ownership" />
						<xsl:with-param name="external" select="$external" />
					</xsl:call-template>
					</parameter>
				</xsl:for-each>
				</parameters>
			</xsl:if>
		</callback>
	</xsl:template>	

	<xsl:template match="gir:constructor[not(@private) and not(@disguised)]">
		<xsl:param name="external" />

		<xsl:variable name="t" select="gir:parameters/gir:parameter/gir:type/@name" />

		<constructor cname="{@c:identifier}">

			<xsl:if test="count(gir:parameters/gir:parameter)=0">
				<xsl:attribute name="disable_void_ctor" />
			</xsl:if>
			<xsl:if test="count(gir:parameters/gir:parameter) = 1 and exsl:node-set($consttypes)/types/ctor/type[@name=$t]">
				<xsl:attribute name="disable_raw_ctor" />
			</xsl:if>

			<xsl:if test="gir:parameters">
				<xsl:element name="parameters">
				<xsl:for-each select="gir:parameters/gir:parameter">

					<xsl:element name="parameter">
					<xsl:call-template name="output-type">
						<xsl:with-param name="name" select="@name" />
						<xsl:with-param name="typename" select="gir:type/@name" />
						<xsl:with-param name="type" select="gir:type/@c:type" />
						<xsl:with-param name="transfer-ownership" select="@transfer-ownership" />
						<xsl:with-param name="external" select="$external" />
					</xsl:call-template>
					</xsl:element>

				</xsl:for-each>
				</xsl:element>
			</xsl:if>
		</constructor>
	</xsl:template>	

	<xsl:template match="glib:signal[not(@private) and not(@disguised)]">
		<xsl:param name="external" />

		<xsl:variable name="name">
			<xsl:call-template name="capitalize">
				<xsl:with-param name="string" select="@name" />
				<xsl:with-param name="sep"><xsl:text>-</xsl:text></xsl:with-param>
			</xsl:call-template>
		</xsl:variable>

		<xsl:if test="not(../gir:method[@name = translate(current()/@name,'-','_')]) and not(../gir:virtual-method[@name = translate(current()/@name,'-','_')])">
			<signal name="{$name}" cname="{@name}">

				<!-- xsl:if test="gir:return-value/gir:type/@name != 'none'" -->
					<return-type>
						<xsl:call-template name="output-type">
							<xsl:with-param name="typename" select="gir:return-value/gir:type/@name" />
							<xsl:with-param name="type" select="gir:return-value/gir:type/@c:type" />
							<xsl:with-param name="transfer-ownership" select="gir:return-value/@transfer-ownership" />
							<xsl:with-param name="doname">0</xsl:with-param>
							<xsl:with-param name="external" select="$external" />
						</xsl:call-template>
					</return-type>
				<!-- /xsl:if -->

				<parameters>
					<xsl:variable name="prtypemap">
						<xsl:call-template name="map-type">
							<xsl:with-param name="type" select="../@c:type"/>
							<xsl:with-param name="name" select="../@name"/>
							<xsl:with-param name="external" select="$external" />
						</xsl:call-template>
					</xsl:variable>

					<parameter
						name="{translate(../@name,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')}"
						type="{exsl:node-set($prtypemap)/type/@ctype}*" />

					<xsl:for-each select="gir:parameters/gir:parameter">
						<parameter>
						<xsl:call-template name="output-type">
							<xsl:with-param name="name" select="@name" />
							<xsl:with-param name="typename" select="gir:type/@name" />
							<xsl:with-param name="type" select="gir:type/@c:type" />
							<xsl:with-param name="transfer-ownership" select="@transfer-ownership" />
							<xsl:with-param name="external" select="$external" />
						</xsl:call-template>
						</parameter>
					</xsl:for-each>
				</parameters>
			</signal>
		</xsl:if>
	</xsl:template>	

	<xsl:template match="gir:enumeration[not(@private) and not(@disguised)]">
		<xsl:param name="external" />

		<xsl:variable name="name">
			<xsl:call-template name="sanitize">
				<xsl:with-param name="name" select="@name" />
			</xsl:call-template>
		</xsl:variable>

		<enum name="{$name}" cname="{@c:type}">
			<xsl:choose>
			<xsl:when test="@glib:get-type">
				<xsl:attribute name="gtype"><xsl:value-of select="@glib:get-type" /></xsl:attribute>
				<xsl:attribute name="type">enum</xsl:attribute>
			</xsl:when>
			<xsl:otherwise>
				<xsl:attribute name="type">enum</xsl:attribute>
			</xsl:otherwise>
			</xsl:choose>
			<xsl:for-each select="gir:member">
				<xsl:sort select="@value" />

				<xsl:variable name="ename">
					<xsl:choose><xsl:when test="@name = @value">
						<xsl:call-template name="capitalize"><xsl:with-param name="string" select="@c:identifier"/></xsl:call-template>
					</xsl:when><xsl:otherwise>
						<xsl:call-template name="capitalize"><xsl:with-param name="string" select="@name"/></xsl:call-template>
					</xsl:otherwise></xsl:choose>
				</xsl:variable>
				<xsl:variable name="mname"><xsl:call-template name="map-name"><xsl:with-param name="name" select="$ename"/></xsl:call-template></xsl:variable>
				<member cname="{@c:identifier}" name="{$mname}" />
			</xsl:for-each>
		</enum>
	</xsl:template>	

	<xsl:template match="gir:bitfield[not(@private) and not(@disguised)]">
		<xsl:param name="external" />

		<xsl:variable name="name">
			<xsl:call-template name="sanitize">
				<xsl:with-param name="name" select="@name" />
			</xsl:call-template>
		</xsl:variable>

		<enum name="{$name}" cname="{@c:type}" type="flags">
			<xsl:choose>
			<xsl:when test="@glib:get-type">
				<xsl:attribute name="gtype"><xsl:value-of select="@glib:get-type" /></xsl:attribute>
				<xsl:attribute name="type">enum</xsl:attribute>
			</xsl:when>
			<xsl:otherwise>
				<xsl:attribute name="type">enum</xsl:attribute>
			</xsl:otherwise>
			</xsl:choose>
			<xsl:for-each select="gir:member">
				<xsl:sort select="@value" />

				<xsl:variable name="ename">
					<xsl:choose><xsl:when test="@name = @value">
						<xsl:call-template name="capitalize"><xsl:with-param name="string" select="@c:identifier"/></xsl:call-template>
					</xsl:when><xsl:otherwise>
						<xsl:call-template name="capitalize"><xsl:with-param name="string" select="@name"/></xsl:call-template>
					</xsl:otherwise></xsl:choose>
				</xsl:variable>
				<xsl:variable name="mname"><xsl:call-template name="map-name"><xsl:with-param name="name" select="$ename"/></xsl:call-template></xsl:variable>
				<member cname="{@c:identifier}" name="{$mname}" />
			</xsl:for-each>
		</enum>
	</xsl:template>	

	<xsl:template match="gir:field[not(@private) and not(@disguised)]">
		<xsl:param name="external" />

		<xsl:if test="not(../gir:property[@name = translate(current()/@name,'_','-')]) and not(../gir:method[@name = current()/@name])">

			<!-- Let's skip fields whose types are callbacks, for now -->
			<xsl:if test="not(gir:callback)">

			<xsl:variable name="name"><xsl:call-template name="capitalize"><xsl:with-param name="string" select="@name"/></xsl:call-template></xsl:variable>

			<field cname="{@name}">
				<xsl:call-template name="output-type">
					<xsl:with-param name="name" select="$name" />
					<xsl:with-param name="typename" select="gir:type/@name" />
					<xsl:with-param name="type" select="gir:type/@c:type" />
					<xsl:with-param name="transfer-ownership" select="@transfer-ownership" />
					<xsl:with-param name="external" select="$external" />
				</xsl:call-template>
			</field>

			</xsl:if>
		</xsl:if>
	</xsl:template>	

	<xsl:template match="gir:property[not(@private) and not(@disguised)]">
		<xsl:param name="external" />

		<xsl:if test="not(../gir:method[@name = translate(current()/@name,'-','_')]) and not(../gir:virtual-method[@name = translate(current()/@name,'-','_')])">

			<xsl:variable name="name"><xsl:call-template name="capitalize"><xsl:with-param name="string" select="@name"/><xsl:with-param name="sep">-</xsl:with-param></xsl:call-template></xsl:variable>
			<xsl:variable name="typemap"><xsl:call-template name="map-type"><xsl:with-param name="type" select="gir:type/@c:type"/><xsl:with-param name="name" select="gir:type/@name"/><xsl:with-param name="external" select="$external" /></xsl:call-template></xsl:variable>

			<xsl:variable name="type">
				<xsl:choose>
				<xsl:when test="//*/gir:namespace/gir:enumeration[@c:type=gir:type/@c:type]">
					<xsl:text>int</xsl:text>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="exsl:node-set($typemap)/type/@ctype"/>
				</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>

			<xsl:variable name="writable">
				<xsl:choose><xsl:when test="@writable and @writable=1">
					<xsl:text>true</xsl:text>
				</xsl:when><xsl:otherwise>
					<xsl:text>false</xsl:text>
				</xsl:otherwise></xsl:choose>
			</xsl:variable>

			<xsl:if test="$type!=''">
				<property name="{$name}" cname="{@name}" type="{$type}" readable="true" writable="{$writable}"/>
			</xsl:if>
		</xsl:if>
	</xsl:template>	

	<!-- Let's avoid implements for now 
	<xsl:template match="gir:implements">
		<xsl:param name="external" />

		<implements>
			<interface name="{@name}" />
		</implements>
	</xsl:template>
	-->

	<xsl:template match="gir:*" />

	<xsl:template match="text()" mode="#all" />


	<!-- Helper templates -->

	<xsl:template name="output-method">
		<xsl:param name="shared">false</xsl:param>
		<xsl:param name="nodename">method</xsl:param>
		<xsl:param name="cname"/>
		<xsl:param name="external" />

		<xsl:variable name="name">
			<xsl:call-template name="capitalize">
				<xsl:with-param name="string" select="@name" />
			</xsl:call-template>
		</xsl:variable>

		<xsl:element name="{$nodename}">
			<xsl:attribute name="name"><xsl:value-of select="$name"/></xsl:attribute>
			<xsl:choose><xsl:when test="$cname">
				<xsl:attribute name="cname"><xsl:value-of select="$cname"/></xsl:attribute>
			</xsl:when><xsl:otherwise>
				<xsl:attribute name="cname"><xsl:value-of select="@c:identifier"/></xsl:attribute>
			</xsl:otherwise></xsl:choose>
			<xsl:if test="$shared = 'true'"><xsl:attribute name="shared">true</xsl:attribute></xsl:if>

			<!-- xsl:if test="gir:return-value/gir:type/@name != 'none'" -->
			<xsl:for-each select="gir:return-value">
				<return-type>
					<xsl:call-template name="output-type">
						<xsl:with-param name="typename" select="gir:type/@name" />
						<xsl:with-param name="type" select="gir:type/@c:type" />
						<xsl:with-param name="transfer-ownership" select="@transfer-ownership" />
						<xsl:with-param name="external" select="$external" />
					</xsl:call-template>
				</return-type>
			</xsl:for-each>
			<!-- / xsl:if -->

			<xsl:if test="gir:parameters">
				<parameters>
				<xsl:if test="$nodename='virtual_method'">
					<parameter name="{../@c:symbol-prefix}" type="{../@c:type}*" />
				</xsl:if>
				<xsl:for-each select="gir:parameters/gir:parameter">
					<parameter>
					<xsl:call-template name="output-type">
						<xsl:with-param name="name" select="@name" />
						<xsl:with-param name="typename" select="gir:type/@name" />
						<xsl:with-param name="type" select="gir:type/@c:type" />
						<xsl:with-param name="transfer-ownership" select="@transfer-ownership" />
						<xsl:with-param name="external" select="$external" />
					</xsl:call-template>
					</parameter>
				</xsl:for-each>
				<xsl:if test="@throws">
					<parameter name="error" type="GError**" />
				</xsl:if>
				</parameters>
			</xsl:if>
		</xsl:element>
	</xsl:template>

	<xsl:template name="output-type">
		<xsl:param name="name"/>
		<xsl:param name="typename"/>
		<xsl:param name="type"/>
		<xsl:param name="transfer-ownership"/>
		<xsl:param name="dotype">1</xsl:param>
		<xsl:param name="external"/>


		<xsl:variable name="pname"><xsl:call-template name="map-name"><xsl:with-param name="name" select="$name"/></xsl:call-template></xsl:variable>
		<xsl:variable name="thetype"><xsl:choose><xsl:when test="$type"><xsl:value-of select="$type"/></xsl:when><xsl:when test="$typename"><xsl:value-of select="$typename"/></xsl:when><xsl:otherwise><xsl:value-of select="$pname"/></xsl:otherwise></xsl:choose></xsl:variable>

		<xsl:variable name="ptypemap">
			<xsl:call-template name="map-type">
				<xsl:with-param name="type" select="$thetype"/>
				<xsl:with-param name="name" select="$typename"/>
				<xsl:with-param name="transfer-ownership" select="@transfer-ownership" />
				<xsl:with-param name="external" select="$external"/>
			</xsl:call-template>
		</xsl:variable>

		<!-- hack to replace enums with int because gapi is silly and doesn't register their types -->
		<xsl:variable name="ptype">
			<xsl:choose>

			<xsl:when test="//*/gir:namespace/gir:enumeration[@name=$typename] and not(//*/gir:namespace/gir:enumeration[@name=$typename]/@glib:get-type) ">
				<xsl:text>int</xsl:text>
			</xsl:when>
			<xsl:when test="$transfer-ownership='none' and exsl:node-set($consttypes)/types/type[@name=exsl:node-set($ptypemap)/type/@ctype]">
				<xsl:text>const-</xsl:text><xsl:value-of select="exsl:node-set($ptypemap)/type/@ctype"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:choose>
					<xsl:when test="exsl:node-set($ptypemap)/type/@ctype">
						<xsl:value-of select="exsl:node-set($ptypemap)/type/@ctype"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:choose>
							<xsl:when test="gir:callback[@name=$name]">
								<xsl:value-of select="//gir:repository/gir:namespace/@name"/><xsl:value-of select="@name"/>Func
							</xsl:when>
							<xsl:otherwise>none</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>

		<xsl:if test="$pname!=''">
			<xsl:attribute name="name"><xsl:value-of select="$pname"/></xsl:attribute>
		</xsl:if>
		<xsl:if test="$dotype=1">
			<xsl:attribute name="type"><xsl:value-of select="$ptype"/></xsl:attribute>
		</xsl:if>

		<xsl:if test="gir:array">
			<xsl:choose>
			<xsl:when test="gir:array/@length">
				<xsl:attribute name="array_len"><xsl:value-of select="gir:array/@length"/></xsl:attribute>
			</xsl:when>
			<xsl:when test="gir:array/@fixed-size">
				<xsl:attribute name="array_len"><xsl:value-of select="gir:array/@fixed-size"/></xsl:attribute>
			</xsl:when>
			<xsl:otherwise>
				<xsl:attribute name="array">true</xsl:attribute>
			</xsl:otherwise>
			</xsl:choose>
		</xsl:if>


		<xsl:if test="exsl:node-set($ptypemap)/type/@warning">
			<warning><xsl:value-of select="exsl:node-set($ptypemap)/type/@warning"/></warning>
		</xsl:if>
		<!-- debug s="1" name="{$name}" pname="{$pname}" ptypemap="{$ptypemap}" typename="{$typename}" typea="{$type}" transfer-ownership="{$transfer-ownership}" mapping="{exsl:node-set($typemappings)/mappings/mapping[@from=$typename]/@to}" dotype="{$dotype}" / -->
<!--
		<gtypes>
			<name><xsl:value-of select="$typename" /></name>
			<aname><xsl:value-of select="@name" /></aname>
			<thetype><xsl:value-of select="$thetype" /></thetype>
			<typemap>
				<xsl:copy-of select="$ptypemap" />
			</typemap>
			<type>
				<xsl:call-template name="map-gtype">
					<xsl:with-param name="type" select="$typename"/>
					<xsl:with-param name="external" select="$external"/>
				</xsl:call-template>
			</type>
		</gtypes>
-->

	</xsl:template>

	<xsl:template name="map-name">
		<xsl:param name="name"/>
		<xsl:choose>
			<xsl:when test="not($name) and gir:varargs">var_args</xsl:when>
			<xsl:when test="not(exsl:node-set($mappings)/mappings/mapping[@from=$name])"><xsl:value-of select="$name" /></xsl:when>
			<xsl:otherwise><xsl:value-of select="exsl:node-set($mappings)/mappings/mapping[@from=$name]/@to" /></xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<xsl:template name="sanitize">
		<xsl:param name="name" />

		<xsl:choose>
			<xsl:when test="starts-with($name, '0') or starts-with($name, '1') or starts-with($name, '2') or starts-with($name, '3') or starts-with($name, '4') or starts-with($name, '5') or starts-with($name, '6') or starts-with($name, '7') or starts-with($name, '8') or starts-with($name, '9')">
				<xsl:choose>
					<xsl:when test="@c:type"><xsl:value-of select="@c:type"/></xsl:when>
					<xsl:otherwise>_<xsl:value-of select="$name"/></xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise><xsl:value-of select="$name"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<xsl:template name="capitalize">
		<xsl:param name="string"/>
		<xsl:param name="sep">_</xsl:param>
		<xsl:value-of select="translate(substring($string,1,1),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/>
		<xsl:choose><xsl:when test="contains($string,$sep)">
			<xsl:value-of select="substring-before(substring($string,2),$sep)"/>
		</xsl:when><xsl:otherwise>
			<xsl:value-of select="substring($string,2)"/>
		</xsl:otherwise></xsl:choose>
		<xsl:if test="contains($string,$sep)">
			<xsl:call-template name="capitalize">
				<xsl:with-param name="string" select="substring-after($string,$sep)"/>
				<xsl:with-param name="sep" select="$sep"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template>

	<xsl:template name="map-type">
		<xsl:param name="type" />
		<xsl:param name="name" />
		<xsl:param name="transfer-ownership">none</xsl:param>
		<xsl:param name="nopointer" />
		<xsl:param name="external" />

		<type>

		<xsl:choose>
			<xsl:when test="gir:varargs">
				<xsl:attribute name="ctype">va_list</xsl:attribute>
				<xsl:attribute name="gtype">va_list</xsl:attribute>
			</xsl:when>
			<xsl:when test="gir:array">
				<xsl:call-template name="map-gtype">
					<xsl:with-param name="type" select="gir:array/@c:type" />
					<xsl:with-param name="transfer-ownership" select="$transfer-ownership" />
					<xsl:with-param name="nopointer" select="$nopointer" />
					<xsl:with-param name="external" select="$external" />
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="not($name)">
				<xsl:call-template name="map-gtype">
					<xsl:with-param name="type" select="$type" />
					<xsl:with-param name="transfer-ownership" select="$transfer-ownership" />
					<xsl:with-param name="nopointer" select="$nopointer" />
					<xsl:with-param name="external" select="$external" />
				</xsl:call-template>
			</xsl:when>

			<xsl:otherwise>
				<xsl:call-template name="map-gtype">
					<xsl:with-param name="type" select="$name" />
					<xsl:with-param name="transfer-ownership" select="$transfer-ownership" />
					<xsl:with-param name="nopointer" select="$nopointer" />
					<xsl:with-param name="external" select="$external" />
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
		
		</type>
	</xsl:template>

	<xsl:template name="map-gtype">
		<xsl:param name="type" />
		<xsl:param name="transfer-ownership">none</xsl:param>
		<xsl:param name="nopointer" />
		<xsl:param name="external" />


		<xsl:choose>
			<xsl:when test="contains($type, '.')">
				<xsl:variable name="ns" select="substring-before($type, '.')" />
				<xsl:variable name="t" select="substring-after($type, '.')" />
				<xsl:variable name="l" select="exsl:node-set($external)/include[@name=$ns]/gir:repository/gir:namespace[@name=$ns]" />

				<xsl:call-template name="map-gtype-inner">
					<xsl:with-param name="type" select="$type" />
					<xsl:with-param name="transfer-ownership" select="$transfer-ownership" />
					<xsl:with-param name="l" select="$l" />
					<xsl:with-param name="t" select="$t" />
					<xsl:with-param name="nopointer" select="$nopointer" />
				</xsl:call-template>

			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="t" select="$type" />
				<xsl:variable name="l" select="//gir:repository/gir:namespace" />
				
				<xsl:call-template name="map-gtype-inner">
					<xsl:with-param name="type" select="$type" />
					<xsl:with-param name="transfer-ownership" select="$transfer-ownership" />
					<xsl:with-param name="l" select="$l" />
					<xsl:with-param name="t" select="$t" />
					<xsl:with-param name="nopointer" select="$nopointer" />
				</xsl:call-template>

			</xsl:otherwise>
		</xsl:choose>

	</xsl:template>

	<xsl:template name="map-gtype-inner">
		<xsl:param name="type" />
		<xsl:param name="transfer-ownership" />
		<xsl:param name="l" />
		<xsl:param name="t" />
		<xsl:param name="nopointer" />

				<xsl:choose>

					<xsl:when test="exsl:node-set($typemappings)/mappings/mapping[@from=$t]">
						<xsl:attribute name="ctype"><xsl:value-of select="exsl:node-set($typemappings)/mappings/mapping[@from=$t]/@to" /></xsl:attribute>
						<xsl:attribute name="gtype"><xsl:value-of select="exsl:node-set($typemappings)/mappings/mapping[@from=$t]/@to" /></xsl:attribute>
					</xsl:when>

					<xsl:when test="exsl:node-set($typemappings)/mappings/mapping[@from=$type]">
						<xsl:attribute name="ctype"><xsl:value-of select="exsl:node-set($typemappings)/mappings/mapping[@from=$type]/@to" /></xsl:attribute>
						<xsl:attribute name="gtype"><xsl:value-of select="exsl:node-set($typemappings)/mappings/mapping[@from=$type]/@to" /></xsl:attribute>
					</xsl:when>


					<xsl:when test="$l/gir:class[@name=$t]">
						<xsl:attribute name="ctype"><xsl:value-of select="$l/gir:class[@name=$t]/@c:type" />*</xsl:attribute>
						<xsl:attribute name="gtype"><xsl:value-of select="$l/gir:class[@name=$t]/@glib:type-name" /></xsl:attribute>
					</xsl:when>
					<xsl:when test="$l/gir:record[@name=$t]">
						<xsl:choose>
						<xsl:when test="gir:type/@c:type and concat($l/gir:record[@name=$t]/@c:type,'*') != string(gir:type/@c:type)">
							<xsl:attribute name="warning">type does not match c:type - record:<xsl:value-of select="$l/@name"/>/<xsl:value-of select="$t"/>. '<xsl:value-of select="$l/gir:record[@name=$t]/@c:type" />*' == '<xsl:value-of select="gir:type/@c:type"/>'(ctype)</xsl:attribute>
							<xsl:attribute name="ctype"><xsl:value-of select="gir:type/@c:type" /></xsl:attribute>
						</xsl:when>
						<xsl:otherwise>
							<xsl:attribute name="ctype"><xsl:value-of select="$l/gir:record[@name=$t]/@c:type" />*</xsl:attribute>
						</xsl:otherwise>
						</xsl:choose>
						<xsl:choose>
							<xsl:when test="$l/gir:record[@name=$t]/@glib:type-name">
								<xsl:attribute name="gtype"><xsl:value-of select="$l/gir:record[@name=$t]/@glib:type-name" /></xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="gtype"><xsl:value-of select="$l/gir:record[@name=$t]/@c:type" /></xsl:attribute>
								<xsl:attribute name="warning">missing glib:type-name</xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:attribute name="warning">missing glib:type-name</xsl:attribute>
					</xsl:when>
					<xsl:when test="$l/gir:union[@name=$t]">
						<xsl:attribute name="ctype"><xsl:value-of select="$l/gir:union[@name=$t]/@c:type" />*</xsl:attribute>
						<xsl:attribute name="gtype"><xsl:value-of select="$l/gir:union[@name=$t]/@glib:type-name" /></xsl:attribute>
					</xsl:when>
					<xsl:when test="$l/gir:boxed[@name=$t]">
						<xsl:attribute name="ctype"><xsl:value-of select="$l/gir:boxed[@name=$t]/@c:type" />*</xsl:attribute>
						<xsl:attribute name="gtype"><xsl:value-of select="$l/gir:boxed[@name=$t]/@glib:type-name" /></xsl:attribute>
					</xsl:when>
					<xsl:when test="$l/gir:interface[@name=$t]">
						<xsl:attribute name="ctype"><xsl:value-of select="$l/gir:interface[@name=$t]/@c:type" /><xsl:if test="$nopointer!=1">*</xsl:if></xsl:attribute>
						<xsl:attribute name="gtype"><xsl:value-of select="$l/gir:interface[@name=$t]/@glib:type-name" /></xsl:attribute>
					</xsl:when>

					<xsl:when test="$l/gir:bitfield[@name=$t]">
						<xsl:attribute name="ctype"><xsl:value-of select="$l/gir:bitfield[@name=$t]/@c:type" /></xsl:attribute>
						<xsl:attribute name="gtype"><xsl:value-of select="$l/gir:bitfield[@name=$t]/@glib:type-name" /></xsl:attribute>
					</xsl:when>
					<xsl:when test="$l/gir:enumeration[@name=$t]">
						<xsl:attribute name="ctype"><xsl:value-of select="$l/gir:enumeration[@name=$t]/@c:type" /></xsl:attribute>
						<xsl:attribute name="gtype"><xsl:value-of select="$l/gir:enumeration[@name=$t]/@glib:type-name" /></xsl:attribute>
					</xsl:when>
					<xsl:when test="$l/gir:callback[@name=$t]">
						<!-- It appears callbacks need to have the name as the type (and not the c:type) -->
						<xsl:choose>
							<xsl:when test="$l/gir:callback[@name=$t]/@c:type">
								<xsl:attribute name="ctype"><xsl:value-of select="$l/gir:callback[@name=$t]/@c:type" /></xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="ctype"><xsl:value-of select="$t" /></xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:attribute name="gtype"><xsl:value-of select="$l/gir:callback[@name=$t]/@glib:type-name" /></xsl:attribute>
					</xsl:when>
					<xsl:when test="$l/gir:alias[@name=$t]">
						<xsl:attribute name="ctype"><xsl:value-of select="$l/gir:alias[@name=$t]/gir:type/@c:type" /></xsl:attribute>
						<xsl:attribute name="gtype"><xsl:value-of select="$l/gir:alias[@name=$t]/gir:type/@glib:type-name" /></xsl:attribute>
					</xsl:when>


					<xsl:when test="gir:callback[@name=current()/@name]">
						<xsl:attribute name="ctype"><xsl:value-of select="$l/@name" /><xsl:value-of select="$type" />Func</xsl:attribute>
						<xsl:attribute name="gtype"><xsl:value-of select="$l/@name" /><xsl:value-of select="$type" />Func</xsl:attribute>
					</xsl:when>

					<xsl:otherwise>
						<xsl:choose>
							<xsl:when test="$transfer-ownership='full'">
								<xsl:attribute name="ctype"><xsl:value-of select="$type" />*</xsl:attribute>
								<xsl:attribute name="gtype"><xsl:value-of select="$type" /></xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="ctype"><xsl:value-of select="$type" /></xsl:attribute>
								<xsl:attribute name="gtype"><xsl:value-of select="$type" /></xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>

	</xsl:template>

	<xsl:template name="get-real-type-name">
		<xsl:param name="node" />
		<xsl:param name="external" />

		<xsl:choose>
			<xsl:when test="$node/@glib:is-gtype-struct-for">
				<xsl:variable name="name"><xsl:value-of select="$node/@glib:is-gtype-struct-for"/></xsl:variable>
				<xsl:value-of select="$name"/>
				<!-- xsl:choose>
					<xsl:when test="contains($name, '.')">
						<xsl:variable name="ns" select="substring-before($type, '.')" />
						<xsl:variable name="t" select="substring-after($type, '.')" />

						<xsl:if test="exsl:node-set($external)/include[@name=$ns]/gir:repository/gir:namespace[@name=$ns]/gir:record[@name=$t]">
							<xsl:value-of select="exsl:node-set($external)/include[@name=$ns]/gir:repository/gir:namespace[@name=$ns]/gir:record[@name=$t]/@glib:type-name" />
						</xsl:if>

						<xsl:if test="exsl:node-set($external)/include[@name=$ns]/gir:repository/gir:namespace[@name=$ns]/gir:class[@name=$t]">
							<xsl:value-of select="exsl:node-set($external)/include[@name=$ns]/gir:repository/gir:namespace[@name=$ns]/gir:class[@name=$t]/@glib:type-name" />
						</xsl:if>

					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="//*/gir:namespace/gir:record[@name=$name]">
							<xsl:value-of select="//*/gir:namespace/gir:record[@name=$name]/@glib:type-name"/>
						</xsl:if>
						<xsl:if test="//*/gir:namespace/gir:class[@name=$name]">
							<xsl:value-of select="//*/gir:namespace/gir:class[@name=$name]/@glib:type-name"/>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose -->
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="name"><xsl:value-of select="$node/@name"/></xsl:variable>
				<xsl:value-of select="$name" />
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

</xsl:stylesheet>
